{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-61-61aa12916261>, line 15)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-61-61aa12916261>\"\u001b[0;36m, line \u001b[0;32m15\u001b[0m\n\u001b[0;31m    kappa =\u001b[0m\n\u001b[0m            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "#Start with just one resonant frequency\n",
    "#Set parameters\n",
    "\n",
    "omega_p = 1\n",
    "omega_0 =10\n",
    "\n",
    "#axis range - adjust if needed\n",
    "omega = np.arange(0.,30,0.1)\n",
    "\n",
    "#calculate real and imaginary parts, then put together as n and kappa\n",
    "real_omega = np.array()\n",
    "imag_omega = np.array()\n",
    "    \n",
    "n = np.array(np.sqrt())\n",
    "kappa = \n",
    "    \n",
    "#plot them\n",
    "plt.plot(omega,n,'b',omega,kappa,'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Start with just one resonant frequency\n",
    "#Set parameters\n",
    "\n",
    "omega_p = 1\n",
    "omega_0 =10\n",
    "\n",
    "#axis range - adjust if needed\n",
    "omega = np.arange(0,30,.1)\n",
    "\n",
    "#calculate real and imaginary parts, then put together as n and kappa\n",
    "\n",
    "real_omega = np.array(omega_p**2*(omega_0**2-omega**2)/((omega_0**2-omega**2)**2+omega**2))\n",
    "imag_omega = np.array(omega_p**2*omega/((omega_0**2-omega**2)**2+omega**2))\n",
    "    \n",
    "n = np.array(np.sqrt((1+real_omega+np.sqrt((1+real_omega)**2+imag_omega**2))/2))\n",
    "kappa = np.array(imag_omega/2/n)\n",
    "    \n",
    "#plot them\n",
    "plt.plot(omega,n,'b',omega,kappa,'r')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Set parameters\n",
    "fs = [0.5,0.25,0.25]\n",
    "omega_ps = [5,5,15]\n",
    "omega_0s = [10.,15.,25.]\n",
    "\n",
    "#axis range - adjust if needed\n",
    "omega = np.arange(0,30,.1)\n",
    "real_omega = np.zeros_like(omega)\n",
    "imag_omega = np.zeros_like(omega)\n",
    "\n",
    "#calculate real and imaginary parts, then put together as n and kappa\n",
    "for i,omega_0 in enumerate(omega_0s):\n",
    "    f=fs[i]\n",
    "    omega_p = omega_ps[i]\n",
    "    real_omega = real_omega + np.array(f*omega_p**2*(omega_0**2-omega**2)/((omega_0**2-omega**2)**2+omega**2))\n",
    "    imag_omega = imag_omega + np.array(f*omega_p**2*omega/((omega_0**2-omega**2)**2+omega**2))\n",
    "    \n",
    "n = np.array(np.sqrt((1+real_omega+np.sqrt((1+real_omega)**2+imag_omega**2))/2))\n",
    "kappa = np.array(imag_omega/2/n)\n",
    "    \n",
    "#plot them\n",
    "plt.plot(omega,n,'b',omega,kappa,'r')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
